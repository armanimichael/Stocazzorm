<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var types = new List<string>
    {
        "byte",
        "short",
        "int",
        "long",
        "float",
        "double",
        "decimal",
        "string",
        "bool",
        "Guid",
        "char",
        "DateTime"
    };
#>
// <auto-generated/> DO NOT MANUALLY EDIT
#nullable enable
using Stocazzorm;
using Stocazzorm.IntegrationTests.Models;
using Microsoft.Data.Sqlite;

namespace Stocazzorm.IntegrationTests.Utils;

public static class SqliteQueries
{
<#
foreach (var type in types)
{
    var csCapitalizedType = $"{char.ToUpper(type[0]) + type.Substring(1)}";
    var modelName = $"{csCapitalizedType}OnlyModel";
#>
    public static async Task<<#= modelName #>?> Create<#= csCapitalizedType #>Async(SqliteConnection conn, <#= type #> val) => 
        await conn.QuerySingleAsync<<#= modelName #>>(
            //lang=text - Ignore
            $"""
             INSERT INTO validate_<#= type #>(val)
             Values({val})
             RETURNING *
             """
    );
<#
}
#>
<#
foreach (var type in types)
{
    var csCapitalizedType = $"{char.ToUpper(type[0]) + type.Substring(1)}";
    var modelName = $"Nullable{csCapitalizedType}OnlyModel";
#>
    public static async Task<<#= modelName #>?> CreateNullable<#= csCapitalizedType #>Async(SqliteConnection conn, <#= type #>? val) => 
        await conn.QuerySingleAsync<<#= modelName #>>(
            //lang=text - Ignore
            $"""
             INSERT INTO validate_nullable_<#= type #>(val)
             Values({val})
             RETURNING *
             """
    );
<#
}
#>
}
